#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
"""

import logging
import time
import random
from typing import Optional, Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class SimpleBehavior:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è"""

    def __init__(self):
        self.delays = {
            'between_actions': (1, 3),
            'reading_pause': (2, 8),
        }

    def random_delay(self, delay_type='between_actions'):
        """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞"""
        if delay_type in self.delays:
            min_val, max_val = self.delays[delay_type]
            delay = random.uniform(min_val, max_val)
            time.sleep(delay)
            return delay
        return 0

    def simulate_reading_pause(self, content_length=100):
        """–ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è"""
        reading_time = max(content_length / 200, 1)
        time.sleep(reading_time)


class SimpleDatabase:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ë–î"""

    def __init__(self, config):
        self.config = config
        self.connected = False

    def is_connected(self):
        return self.connected

    def save_tweet(self, tweet_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–≤–∏—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)"""
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–≤–∏—Ç–∞: {tweet_data.get('url', 'unknown')}")
        return True

    def close(self):
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")


class SimpleBrowser:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä"""

    def __init__(self):
        self.driver = None
        self.initialized = False

    def initialize_browser(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...")
        self.initialized = True
        return True

    def manual_auth(self, behavior=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        logger.info("–ò–º–∏—Ç–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        return True

    def navigate_to_profile(self, username):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é @{username}")
        return True

    def find_tweets_on_page(self):
        """–ü–æ–∏—Å–∫ —Ç–≤–∏—Ç–æ–≤"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–≤–∏—Ç—ã
        return [f"tweet_{i}" for i in range(3)]

    def close(self):
        logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")


class SimpleTwitterScraper:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Twitter"""

    def __init__(self, config=None):
        self.config = config or {
            'scraper': {
                'max_tweets_per_account': 5,
                'time_filter_hours': 24
            }
        }

        self.browser = None
        self.database = None
        self.behavior = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'accounts_processed': 0,
            'tweets_collected': 0,
            'successful_accounts': 0,
            'failed_accounts': 0,
            'start_time': None
        }

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        self.browser = SimpleBrowser()
        if not self.browser.initialize_browser():
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        self.database = SimpleDatabase({})

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.behavior = SimpleBehavior()

        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True

    def authenticate(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        logger.info("=== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===")
        return self.browser.manual_auth(self.behavior)

    def load_accounts_from_file(self, filename="test_accounts.txt"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        test_accounts = ["testuser1", "testuser2", "testuser3"]
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(test_accounts)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return test_accounts

    def extract_tweet_data(self, tweet_element):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–∞"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            tweet_data = {
                'url': f'https://twitter.com/user/status/{random.randint(1000, 9999)}',
                'text': f'–¢–µ—Å—Ç–æ–≤—ã–π —Ç–≤–∏—Ç {random.randint(1, 100)}',
                'created_at': '2024-01-15T10:00:00Z'
            }

            # –ò–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ
            self.behavior.simulate_reading_pause(len(tweet_data['text']))

            return tweet_data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–∞: {e}")
            return None

    def get_tweets_from_user(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–≤–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üì• –°–±–æ—Ä —Ç–≤–∏—Ç–æ–≤ –æ—Ç @{username}")
        collected_tweets = []

        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é
            if not self.browser.navigate_to_profile(username):
                return []

            # –ü–æ–∏—Å–∫ —Ç–≤–∏—Ç–æ–≤
            tweet_elements = self.browser.find_tweets_on_page()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–∏—Ç–æ–≤
            for tweet_element in tweet_elements:
                try:
                    tweet_data = self.extract_tweet_data(tweet_element)

                    if tweet_data:
                        collected_tweets.append(tweet_data)

                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                        if self.database and self.database.is_connected():
                            self.database.save_tweet(tweet_data)

                        logger.info(f"üìù –¢–≤–∏—Ç —Å–æ–±—Ä–∞–Ω: {tweet_data['text'][:30]}...")

                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏
                        self.behavior.random_delay('between_actions')

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–∞: {e}")
                    continue

            logger.info(f"üèÅ –û—Ç @{username} —Å–æ–±—Ä–∞–Ω–æ {len(collected_tweets)} —Ç–≤–∏—Ç–æ–≤")
            return collected_tweets

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è @{username}: {e}")
            return collected_tweets

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        try:
            self.stats['start_time'] = time.time()
            logger.info("üöÄ === –ó–ê–ü–£–°–ö –£–ü–†–û–©–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê ===")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not self.initialize():
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return False

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            self.authenticate()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts = self.load_accounts_from_file()
            if not accounts:
                logger.error("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                return False

            logger.info(f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            for i, username in enumerate(accounts, 1):
                logger.info(f"üë§ === –ê–∫–∫–∞—É–Ω—Ç {i}/{len(accounts)}: @{username} ===")

                try:
                    tweets = self.get_tweets_from_user(username)

                    if tweets:
                        self.stats['tweets_collected'] += len(tweets)
                        self.stats['successful_accounts'] += 1
                        logger.info(f"‚úÖ –û—Ç @{username} –ø–æ–ª—É—á–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤")
                    else:
                        self.stats['failed_accounts'] += 1
                        logger.warning(f"‚ùå –û—Ç @{username} —Ç–≤–∏—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

                    self.stats['accounts_processed'] += 1

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    if i < len(accounts):
                        pause_time = random.uniform(2, 5)
                        logger.info(f"‚è≥ –ü–∞—É–∑–∞: {pause_time:.1f} —Å–µ–∫")
                        time.sleep(pause_time)

                except Exception as e:
                    self.stats['failed_accounts'] += 1
                    self.stats['accounts_processed'] += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ @{username}: {e}")
                    continue

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self._print_final_stats()
            return True

        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            self.cleanup()

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        duration = time.time() - self.stats['start_time'] if self.stats['start_time'] else 0

        logger.info("üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===")
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è: {duration:.1f} —Å–µ–∫")
        logger.info(f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {self.stats['accounts_processed']}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful_accounts']}")
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {self.stats['failed_accounts']}")
        logger.info(f"üìù –¢–≤–∏—Ç–æ–≤: {self.stats['tweets_collected']}")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞...")

        if self.browser:
            self.browser.close()

        if self.database:
            self.database.close()

        logger.info("‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'scraper': {
            'max_tweets_per_account': 3,
            'time_filter_hours': 24
        }
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
    scraper = SimpleTwitterScraper(config)
    success = scraper.run()

    if success:
        logger.info("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("üí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")

    return success


if __name__ == "__main__":
    main()