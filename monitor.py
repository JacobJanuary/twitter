#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import time
import json
import logging
from datetime import datetime, timedelta
from collections import defaultdict, Counter
import mysql.connector
from mysql.connector import Error

logger = logging.getLogger(__name__)


class TwitterScraperMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞ Twitter"""

    def __init__(self, db_config=None):
        self.db_config = db_config
        self.session_stats = {
            'start_time': time.time(),
            'accounts_processed': 0,
            'tweets_collected': 0,
            'errors_count': 0,
            'successful_accounts': 0,
            'failed_accounts': 0,
            'average_tweets_per_account': 0,
            'processing_times': [],
            'error_types': Counter(),
            'tweets_by_hour': defaultdict(int)
        }

    def log_account_start(self, username):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.current_account = {
            'username': username,
            'start_time': time.time(),
            'tweets_found': 0,
            'errors': []
        }
        logger.info(f"üìä –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ @{username}")

    def log_account_finish(self, username, tweets_count, success=True):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if hasattr(self, 'current_account'):
            processing_time = time.time() - self.current_account['start_time']
            self.session_stats['processing_times'].append(processing_time)

            if success:
                self.session_stats['successful_accounts'] += 1
                self.session_stats['tweets_collected'] += tweets_count
                logger.info(f"‚úÖ @{username}: {tweets_count} —Ç–≤–∏—Ç–æ–≤ –∑–∞ {processing_time:.1f}—Å")
            else:
                self.session_stats['failed_accounts'] += 1
                logger.warning(f"‚ùå @{username}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞")

            self.session_stats['accounts_processed'] += 1
            self._update_averages()

    def log_tweet_collected(self, tweet_data):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ —Ç–≤–∏—Ç–∞"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–≤–∏—Ç–∞
            if 'created_at' in tweet_data:
                tweet_time = datetime.fromisoformat(tweet_data['created_at'].replace('Z', '+00:00'))
                hour_key = tweet_time.strftime('%Y-%m-%d %H:00')
                self.session_stats['tweets_by_hour'][hour_key] += 1

            logger.debug(f"üìù –°–æ–±—Ä–∞–Ω —Ç–≤–∏—Ç: {tweet_data.get('url', 'unknown')}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–≤–∏—Ç–∞: {e}")

    def log_error(self, error_type, error_message, username=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        self.session_stats['errors_count'] += 1
        self.session_stats['error_types'][error_type] += 1

        if hasattr(self, 'current_account') and username:
            self.current_account['errors'].append({
                'type': error_type,
                'message': str(error_message),
                'timestamp': time.time()
            })

        logger.error(f"üö® {error_type}: {error_message}")

    def _update_averages(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        if self.session_stats['successful_accounts'] > 0:
            self.session_stats['average_tweets_per_account'] = (
                    self.session_stats['tweets_collected'] /
                    self.session_stats['successful_accounts']
            )

    def get_current_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        session_duration = time.time() - self.session_stats['start_time']

        stats = self.session_stats.copy()
        stats.update({
            'session_duration_minutes': session_duration / 60,
            'tweets_per_minute': self.session_stats['tweets_collected'] / max(session_duration / 60, 1),
            'success_rate': (
                    self.session_stats['successful_accounts'] /
                    max(self.session_stats['accounts_processed'], 1) * 100
            ),
            'average_processing_time': (
                    sum(self.session_stats['processing_times']) /
                    max(len(self.session_stats['processing_times']), 1)
            )
        })

        return stats

    def print_progress_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        stats = self.get_current_stats()

        print("\n" + "=" * 50)
        print("üìä –û–¢–ß–ï–¢ –û –ü–†–û–ì–†–ï–°–°–ï")
        print("=" * 50)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['session_duration_minutes']:.1f} –º–∏–Ω")
        print(f"üë• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats['accounts_processed']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['successful_accounts']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {stats['failed_accounts']}")
        print(f"üìù –°–æ–±—Ä–∞–Ω–æ —Ç–≤–∏—Ç–æ–≤: {stats['tweets_collected']}")
        print(f"üìà –°—Ä–µ–¥–Ω–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {stats['average_tweets_per_account']:.1f}")
        print(f"‚ö° –¢–≤–∏—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {stats['tweets_per_minute']:.1f}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']:.1f}%")

        if stats['errors_count'] > 0:
            print(f"\nüö® –û—à–∏–±–∫–∏ ({stats['errors_count']} –≤—Å–µ–≥–æ):")
            for error_type, count in stats['error_types'].most_common(5):
                print(f"   ‚Ä¢ {error_type}: {count}")

        print("=" * 50)

    def save_session_report(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–µ—Å—Å–∏–∏"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"scraper_report_{timestamp}.json"

        try:
            stats = self.get_current_stats()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Counter –≤ –æ–±—ã—á–Ω—ã–π dict –¥–ª—è JSON
            stats['error_types'] = dict(stats['error_types'])
            stats['tweets_by_hour'] = dict(stats['tweets_by_hour'])

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2, ensure_ascii=False, default=str)

            logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
            return filename

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return None

    def get_database_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.db_config:
            return None

        try:
            connection = mysql.connector.connect(**self.db_config)
            cursor = connection.cursor()

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤
            cursor.execute("SELECT COUNT(*) FROM tweets")
            total_tweets = cursor.fetchone()[0]

            # –¢–≤–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cursor.execute("""
                           SELECT COUNT(*)
                           FROM tweets
                           WHERE created_at >= DATE_SUB(NOW(), INTERVAL 24 HOUR)
                           """)
            recent_tweets = cursor.fetchone()[0]

            # –¢–≤–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            cursor.execute("""
                           SELECT COUNT(*)
                           FROM tweets
                           WHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
                           """)
            week_tweets = cursor.fetchone()[0]

            # –¢–æ–ø –¥–æ–º–µ–Ω–æ–≤ –≤ URL'–∞—Ö
            cursor.execute("""
                           SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(url, '/', 3), '/', -1) as domain,
                    COUNT(*) as count
                           FROM tweets
                           GROUP BY domain
                           ORDER BY count DESC
                               LIMIT 10
                           """)
            top_domains = cursor.fetchall()

            cursor.close()
            connection.close()

            return {
                'total_tweets': total_tweets,
                'recent_tweets_24h': recent_tweets,
                'recent_tweets_7d': week_tweets,
                'top_domains': top_domains
            }

        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return None

    def print_database_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db_stats = self.get_database_stats()

        if db_stats:
            print("\n" + "=" * 50)
            print("üóÑÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("=" * 50)
            print(f"üìä –í—Å–µ–≥–æ —Ç–≤–∏—Ç–æ–≤: {db_stats['total_tweets']:,}")
            print(f"üïê –ó–∞ 24 —á–∞—Å–∞: {db_stats['recent_tweets_24h']:,}")
            print(f"üìÖ –ó–∞ 7 –¥–Ω–µ–π: {db_stats['recent_tweets_7d']:,}")

            if db_stats['top_domains']:
                print(f"\nüåê –¢–æ–ø –¥–æ–º–µ–Ω–æ–≤:")
                for domain, count in db_stats['top_domains'][:5]:
                    print(f"   ‚Ä¢ {domain}: {count:,}")

            print("=" * 50)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")


def create_monitor(db_config=None):
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    return TwitterScraperMonitor(db_config)