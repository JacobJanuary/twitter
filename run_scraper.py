#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Twitter
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–µ—Ä—Å–∏—é
"""

import sys
import logging
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('twitter_scraper.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = ['selenium', 'mysql-connector-python']
    missing_packages = []

    for package in required_packages:
        try:
            if package == 'mysql-connector-python':
                import mysql.connector
            else:
                __import__(package)
        except ImportError:
            missing_packages.append(package)

    if missing_packages:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_packages))
        return False

    logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def test_main_scraper():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        from scraper import LightweightTwitterScraper

        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        config = {
            'mysql': {'host': 'test'},
            'scraper': {'max_tweets_per_account': 1},
            'browser': {'user_agents': ['test']},
            'behavior': {'delays': {'between_actions': (1, 2)}}
        }

        scraper = LightweightTwitterScraper(config)
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True, scraper

    except SyntaxError as e:
        logger.warning(f"‚ö†Ô∏è –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ: {e}")
        return False, None
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False, None


def test_simple_scraper():
    """–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        from simple_scraper import SimpleTwitterScraper

        config = {'scraper': {'max_tweets_per_account': 1}}
        scraper = SimpleTwitterScraper(config)
        logger.info("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True, scraper

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False, None


def get_chrome_profile_path():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é Chrome"""
    system_paths = {
        'darwin': "~/Library/Application Support/Google/Chrome/Profile 1/",  # macOS
        'win32': "~\\AppData\\Local\\Google\\Chrome\\User Data\\Profile 1",  # Windows
        'linux': "~/.config/google-chrome/Profile 1"  # Linux
    }

    platform = sys.platform
    if platform.startswith('darwin'):
        path = system_paths['darwin']
    elif platform.startswith('win'):
        path = system_paths['win32']
    else:
        path = system_paths['linux']

    expanded_path = Path(path).expanduser()

    if expanded_path.exists():
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å Chrome: {expanded_path}")
        return str(expanded_path)
    else:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω: {expanded_path}")
        return None


def create_sample_accounts_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    filename = "influencer_twitter.txt"

    if not os.path.exists(filename):
        sample_accounts = [
            "# –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Twitter",
            "# –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å URL –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username",
            "",
            "# –ü—Ä–∏–º–µ—Ä—ã:",
            "# https://x.com/elonmusk",
            "# https://x.com/BillGates",
            "# sundarpichai",
            "# @tim_cook",
            "",
            "# –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∏–∂–µ:",
            "elonmusk",
            "BillGates"
        ]

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write('\n'.join(sample_accounts))
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞: {filename}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª {filename}: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ === –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê TWITTER ===")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        logger.error("üí• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫")
        return False

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    create_sample_accounts_file()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è Chrome
    chrome_profile = get_chrome_profile_path()

    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...")
    main_available, main_scraper = test_main_scraper()

    if main_available:
        logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º")
        try:
            success = main_scraper.run(chrome_profile, "influencer_twitter.txt")
            if success:
                logger.info("üéâ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error("üí• –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            return success
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...")

    # Fallback –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...")
    simple_available, simple_scraper = test_simple_scraper()

    if simple_available:
        logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
        try:
            success = simple_scraper.run()
            if success:
                logger.info("üéâ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error("üí• –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            return success
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    logger.error("üí• –ù–∏ –æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
    logger.info("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    logger.info("   1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    logger.info("   2. –ù–µ—Ç –ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–∞—Ö")
    logger.info("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python test_modules.py")

    return False


def interactive_setup():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"""
    print("\n" + "=" * 50)
    print("üîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ü–ê–†–°–ï–†–ê")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts_file = "influencer_twitter.txt"
    if not os.path.exists(accounts_file):
        print(f"\n‚ùå –§–∞–π–ª {accounts_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        create_sample_accounts_file()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ {accounts_file}")
        print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª, –¥–æ–±–∞–≤–∏–≤ –Ω—É–∂–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã Twitter")

        edit_now = input("\n–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? (–¥–∞/–Ω–µ—Ç): ").lower()
        if edit_now in ['–¥–∞', 'yes', 'y', '–¥']:
            try:
                if sys.platform.startswith('darwin'):  # macOS
                    os.system(f'open -t {accounts_file}')
                elif sys.platform.startswith('linux'):  # Linux
                    os.system(f'xdg-open {accounts_file}')
                elif sys.platform.startswith('win'):  # Windows
                    os.system(f'notepad {accounts_file}')
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
                print(f"–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª {accounts_file} –≤—Ä—É—á–Ω—É—é")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è Chrome
    chrome_profile = get_chrome_profile_path()
    if not chrome_profile:
        print("\n‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        custom_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—é Chrome (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
        if custom_path and os.path.exists(custom_path):
            chrome_profile = custom_path
            print(f"‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {chrome_profile}")

    print("\nüöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...")
    return chrome_profile


if __name__ == "__main__":
    try:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if len(sys.argv) > 1 and sys.argv[1] == '--setup':
            chrome_profile = interactive_setup()

        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
        success = main()
        sys.exit(0 if success else 1)

    except KeyboardInterrupt:
        logger.info("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        logger.error(traceback.format_exc())
        sys.exit(1)