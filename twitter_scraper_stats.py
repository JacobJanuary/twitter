#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Twitter —Å–∫—Ä–∞–ø–µ—Ä–∞.
–£—Ç–æ—á–Ω–µ–Ω –≤—ã–≤–æ–¥ –¥–ª—è —Ä–µ—Ç–≤–∏—Ç–æ–≤.
(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å—Å—ã–ª–æ–∫ –∏ —Å—Ç–∞—Ç–µ–π —É–¥–∞–ª–µ–Ω)
"""

import os
import logging
from mysql.connector import Error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('twitter_scraper.stats')
# –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ core
if not logger.handlers:
     logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')


def generate_tweet_statistics(results):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Ç–≤–∏—Ç–∞–º (—Ç–æ–ª—å–∫–æ —Ç–≤–∏—Ç—ã –∏ —Ä–µ—Ç–≤–∏—Ç—ã)
    """
    # (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å v2)
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–≤–∏—Ç–∞–º")
    stats = {}
    try:
        total_tweets = sum(len(user.get('tweets', [])) for user in results if isinstance(user, dict))
        stats['total_tweets'] = total_tweets
        total_retweets = sum(
            sum(1 for tweet in user.get('tweets', []) if isinstance(tweet, dict) and tweet.get('is_retweet'))
            for user in results if isinstance(user, dict)
        )
        stats['total_retweets'] = total_retweets
        stats['total_accounts'] = len(results)
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {total_tweets} —Ç–≤–∏—Ç–æ–≤/—Ä–µ—Ç–≤–∏—Ç–æ–≤, {total_retweets} —Ä–µ—Ç–≤–∏—Ç–æ–≤")
        return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}


def generate_database_statistics(db_connection):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã users –∏ tweets)
    """
    # (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å v2)
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    db_stats = {}
    if not db_connection or not db_connection.is_connected():
        logger.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return {"–û—à–∏–±–∫–∞": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"}
    try:
        cursor = db_connection.cursor()
        tables = [{"name": "users", "label": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}, {"name": "tweets", "label": "–¢–≤–∏—Ç–æ–≤/–†–µ—Ç–≤–∏—Ç–æ–≤"}]
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table['name']}")
                count = cursor.fetchone()[0]
                db_stats[table['label']] = count
                logger.info(f"–í —Ç–∞–±–ª–∏—Ü–µ {table['name']} –Ω–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
            except Error as e:
                if e.errno == 1146: logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
                else: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table['name']}: {e}")
                db_stats[table['label']] = "–ù/–î"
        cursor.close()
        return db_stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


def display_results_summary(results, time_filter_hours):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞.
    –£—Ç–æ—á–Ω—è–µ—Ç –≤—ã–≤–æ–¥ –¥–ª—è —Ä–µ—Ç–≤–∏—Ç–æ–≤.
    """
    logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    try:
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∫ –≤ v2)
        def format_time_ago(iso_time_str):
            if not iso_time_str: return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                from twitter_scraper_utils import format_time_ago as format_util
                return format_util(iso_time_str)
            except (ImportError, NameError, Exception):
                try:
                    from dateutil import parser
                    import datetime
                    tweet_time = parser.isoparse(iso_time_str)
                    if tweet_time.tzinfo is None: tweet_time = tweet_time.replace(tzinfo=datetime.timezone.utc)
                    now = datetime.datetime.now(datetime.timezone.utc)
                    diff = now - tweet_time
                    if diff.days > 0: return f"{diff.days} –¥. –Ω–∞–∑–∞–¥"
                    hours = diff.seconds // 3600; minutes = (diff.seconds % 3600) // 60
                    if hours > 0: return f"{hours} —á. –Ω–∞–∑–∞–¥"
                    if minutes > 0: return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
                    return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
                except: return iso_time_str.replace('T', ' ').split('.')[0]

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ç–≤–∏—Ç–∞—Ö
        for user_result in results:
            if not isinstance(user_result, dict): continue
            user_name = user_result.get('name', 'Unknown')
            user_username = user_result.get('username', 'unknown')
            print(f"\n--- {user_name} (@{user_username}) ---")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_username}")

            tweets = user_result.get('tweets', [])
            if tweets:
                print("\n–°–≤–µ–∂–∏–µ —Ç–≤–∏—Ç—ã/—Ä–µ—Ç–≤–∏—Ç—ã:")
                for tweet in tweets:
                    if not isinstance(tweet, dict): continue
                    try:
                        # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –û–†–ò–ì–ò–ù–ê–õ–ê (–µ—Å–ª–∏ —Ä–µ—Ç–≤–∏—Ç)
                        time_str = format_time_ago(tweet.get("created_at", ""))
                        retweet_prefix = ""
                        original_info = ""

                        if tweet.get("is_retweet"):
                            original_author = tweet.get('original_author', 'unknown')
                            retweet_prefix = f"üîÑ –†–µ—Ç–≤–∏—Ç @{user_username} (–æ—Ç @{original_author}): "
                            original_url = tweet.get('original_tweet_url', '')
                            if original_url:
                                 original_info = f"\n   –û—Ä–∏–≥–∏–Ω–∞–ª: {original_url}"
                        else:
                             retweet_prefix = f"üë§ –¢–≤–∏—Ç @{user_username}: " # –£–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞ —Ç–≤–∏—Ç–∞

                        # –¢–µ–∫—Å—Ç –û–†–ò–ì–ò–ù–ê–õ–ê (–µ—Å–ª–∏ —Ä–µ—Ç–≤–∏—Ç)
                        print(f"[{time_str}] {retweet_prefix}{tweet.get('text', '')}")
                        # URL –†–ï–¢–í–ò–¢–ê (–∏–ª–∏ —Ç–≤–∏—Ç–∞)
                        print(f"   URL: {tweet.get('url', '')}{original_info}")

                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –û–†–ò–ì–ò–ù–ê–õ–ê (–µ—Å–ª–∏ —Ä–µ—Ç–≤–∏—Ç)
                        stats = tweet.get("stats", {})
                        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª–∞): üëç {stats.get('likes', 0)} | üîÑ {stats.get('retweets', 0)} | üí¨ {stats.get('replies', 0)}")

                        print("-" * 20) # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–∏—Ç–µ {tweet.get('url', '')}: {e}")
            else:
                 print("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤/—Ä–µ—Ç–≤–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

        # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        stats = generate_tweet_statistics(results)
        print("\n===== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====")
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats.get('total_accounts', 0)}")
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤/—Ä–µ—Ç–≤–∏—Ç–æ–≤ (–∑–∞ {time_filter_hours} —á): {stats.get('total_tweets', 0)}")
        print(f"–ò–∑ –Ω–∏—Ö —Ä–µ—Ç–≤–∏—Ç–æ–≤ (–∑–∞–ø–∏—Å–µ–π): {stats.get('total_retweets', 0)}")

        logger.info("–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

