#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Twitter —Å–∫—Ä–∞–ø–µ—Ä–∞
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π —É–¥–∞–ª–µ–Ω)
"""

import os
import logging
from mysql.connector import Error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('twitter_scraper.stats')


def generate_tweet_statistics(results):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Ç–≤–∏—Ç–∞–º

    Args:
        results: –°–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–±–æ—Ä–∞ —Ç–≤–∏—Ç–æ–≤

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    """
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–≤–∏—Ç–∞–º")
    stats = {}

    try:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤
        total_tweets = sum(len(user.get('tweets', [])) for user in results)
        stats['total_tweets'] = total_tweets

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ç–≤–∏—Ç–æ–≤
        total_retweets = sum(
            sum(1 for tweet in user.get('tweets', []) if tweet.get('is_retweet'))
            for user in results
        )
        stats['total_retweets'] = total_retweets

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π - –£–¥–∞–ª–µ–Ω–æ
        # total_articles = sum(
        #     sum(1 for tweet in user.get('tweets', []) if tweet.get('article'))
        #     for user in results
        # )
        # stats['total_articles'] = total_articles

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
        total_full_tweets = sum(
            sum(1 for tweet in user.get('tweets', []) if tweet.get('is_truncated'))
            for user in results
        )
        stats['total_full_tweets'] = total_full_tweets

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        total_links = sum(
            sum(len(tweet.get("links", {}).get("external_urls", [])) for tweet in user.get('tweets', []))
            for user in results
        )
        stats['total_external_links'] = total_links

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        total_mentions = sum(
            sum(len(tweet.get("links", {}).get("mentions", [])) for tweet in user.get('tweets', []))
            for user in results
        )
        stats['total_mentions'] = total_mentions

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—ç—à—Ç–µ–≥–æ–≤
        total_hashtags = sum(
            sum(len(tweet.get("links", {}).get("hashtags", [])) for tweet in user.get('tweets', []))
            for user in results
        )
        stats['total_hashtags'] = total_hashtags

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        stats['total_accounts'] = len(results)

        # logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {total_tweets} —Ç–≤–∏—Ç–æ–≤, {total_retweets} —Ä–µ—Ç–≤–∏—Ç–æ–≤, " +
        #             f"{total_articles} —Å—Ç–∞—Ç–µ–π, {total_full_tweets} –¥–ª–∏–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤") # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {total_tweets} —Ç–≤–∏—Ç–æ–≤, {total_retweets} —Ä–µ—Ç–≤–∏—Ç–æ–≤, " +
                    f"{total_full_tweets} –¥–ª–∏–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤")

        return stats

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}


def generate_database_statistics(db_connection):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    Args:
        db_connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    db_stats = {}

    try:
        cursor = db_connection.cursor()

        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        tables = [
            {"name": "users", "label": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
            {"name": "tweets", "label": "–¢–≤–∏—Ç–æ–≤"},
            # {"name": "articles", "label": "–°—Ç–∞—Ç–µ–π"}, # –£–¥–∞–ª–µ–Ω–æ
            {"name": "tweet_links", "label": "–°—Å—ã–ª–æ–∫ –∏–∑ —Ç–≤–∏—Ç–æ–≤"},
            # {"name": "article_links", "label": "–°—Å—ã–ª–æ–∫ –∏–∑ —Å—Ç–∞—Ç–µ–π"} # –£–¥–∞–ª–µ–Ω–æ
        ]

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table['name']}")
                count = cursor.fetchone()[0]
                db_stats[table['label']] = count
                logger.info(f"–í —Ç–∞–±–ª–∏—Ü–µ {table['name']} –Ω–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
            except Error as e:
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, articles), —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ
                if e.errno == 1146: # Table doesn't exist
                     logger.info(f"–¢–∞–±–ª–∏—Ü–∞ {table['name']} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–æ–∂–∏–¥–∞–µ–º–æ).")
                     db_stats[table['label']] = 0
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table['name']}: {e}")
                    db_stats[table['label']] = "–ù/–î"

        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            cursor.execute("SELECT link_type, COUNT(*) FROM tweet_links GROUP BY link_type")
            link_stats = cursor.fetchall()

            for link_type, count in link_stats:
                db_stats[f"–°—Å—ã–ª–∫–∏ —Ç–∏–ø–∞ '{link_type}'"] = count
                logger.info(f"–°—Å—ã–ª–æ–∫ —Ç–∏–ø–∞ '{link_type}': {count}")
        except Error as e:
            if e.errno == 1146: # Table doesn't exist
                 logger.info("–¢–∞–±–ª–∏—Ü–∞ tweet_links –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–∞—Ö —Å—Å—ã–ª–æ–∫: {e}")

        # –¢–æ–ø –¥–æ–º–µ–Ω–æ–≤ —Å—Ç–∞—Ç–µ–π - –£–¥–∞–ª–µ–Ω–æ
        # ... (–±–ª–æ–∫ try/except —É–¥–∞–ª–µ–Ω) ...

        return db_stats

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


def display_results_summary(results, time_filter_hours):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞

    Args:
        results: –°–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–±–æ—Ä–∞ —Ç–≤–∏—Ç–æ–≤
        time_filter_hours: –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–≤–∏—Ç–æ–≤ –≤ —á–∞—Å–∞—Ö
    """
    logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    try:
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        def format_time_ago(iso_time_str):
            if not iso_time_str:
                return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
                import twitter_scraper_utils
                format_time_func = getattr(twitter_scraper_utils, 'format_time_ago', None)
                if format_time_func and callable(format_time_func):
                    return format_time_func(iso_time_str)
                else:
                    # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    return iso_time_str.replace('T', ' ').split('.')[0]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ format_time_ago: {e}")
                return iso_time_str

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ç–≤–∏—Ç–∞—Ö
        for user in results:
            print(f"\n--- {user['name']} (@{user['username']}) ---")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user['username']}")

            # –í—ã–≤–æ–¥–∏–º —Ç–≤–∏—Ç—ã
            if user.get('tweets', []):
                print("\n–¢–≤–∏—Ç—ã:")
                for tweet in user["tweets"]:
                    try:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                        time_str = format_time_ago(tweet.get("created_at", ""))

                        # –û—Ç–º–µ—á–∞–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–≤–∏—Ç —Ä–µ—Ç–≤–∏—Ç–æ–º
                        retweet_prefix = ""
                        if tweet.get("is_retweet"):
                            retweet_prefix = f"üîÑ –†–µ—Ç–≤–∏—Ç –æ—Ç @{tweet.get('original_author', 'unknown')}: "

                        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–∏—Ç–µ
                        print(f"[{time_str}] {retweet_prefix}{tweet.get('text', '')}")
                        print(f"–î–∞—Ç–∞ (ISO): {tweet.get('created_at', '')}")
                        print(f"URL: {tweet.get('url', '')}")

                        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        stats = tweet.get("stats", {})
                        print(
                            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üëç {stats.get('likes', 0)} | üîÑ {stats.get('retweets', 0)} | üí¨ {stats.get('replies', 0)}")

                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–∞—Ö –≤ —Ç–≤–∏—Ç–µ
                        if tweet.get("links"):
                            links = tweet.get("links")

                            # –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                            if links.get("external_urls"):
                                print(f"üîó –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ({len(links['external_urls'])}):")
                                for url in links["external_urls"]:
                                    print(f"  - {url}")

                            # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            if links.get("mentions"):
                                print(f"üë§ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è ({len(links['mentions'])}):")
                                for mention in links["mentions"]:
                                    print(f"  - @{mention}")

                            # –•—ç—à—Ç–µ–≥–∏
                            if links.get("hashtags"):
                                print(f"# –•—ç—à—Ç–µ–≥–∏ ({len(links['hashtags'])}):")
                                for hashtag in links["hashtags"]:
                                    print(f"  - #{hashtag}")

                        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å - –£–¥–∞–ª–µ–Ω–æ
                        # ... (–±–ª–æ–∫ if tweet.get("article") —É–¥–∞–ª–µ–Ω) ...

                        # –û—Ç–º–µ—á–∞–µ–º, –µ—Å–ª–∏ —Ç–≤–∏—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏ –ø–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
                        if tweet.get("is_truncated"):
                            print(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞")

                        print("")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–∏—Ç–µ: {e}")

        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = generate_tweet_statistics(results)

        print("\n===== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====")
        print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {stats.get('total_tweets', 0)} —Ç–≤–∏—Ç–æ–≤")
        print(f"–ò–∑ –Ω–∏—Ö —Ä–µ—Ç–≤–∏—Ç–æ–≤: {stats.get('total_retweets', 0)}")
        # print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {stats.get('total_articles', 0)}") # –£–¥–∞–ª–µ–Ω–æ
        print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤: {stats.get('total_full_tweets', 0)}")
        print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {stats.get('total_external_links', 0)}")
        print(f"–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats.get('total_mentions', 0)}")
        print(f"–í—Å–µ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤: {stats.get('total_hashtags', 0)}")
        print(f"–ß–∏—Å–ª–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {stats.get('total_accounts', 0)} –∏–∑ {len(results)}")
        print(f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {time_filter_hours} —á–∞—Å–∞")

        logger.info("–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

