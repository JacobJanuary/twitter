#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Twitter —Å–∫—Ä–∞–ø–µ—Ä–∞
(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å—Å—ã–ª–æ–∫ –∏ —Å—Ç–∞—Ç–µ–π —É–¥–∞–ª–µ–Ω)
"""

import os
import logging
from mysql.connector import Error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('twitter_scraper.stats')


def generate_tweet_statistics(results):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º —Ç–≤–∏—Ç–∞–º (—Ç–æ–ª—å–∫–æ —Ç–≤–∏—Ç—ã –∏ —Ä–µ—Ç–≤–∏—Ç—ã)

    Args:
        results: –°–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–±–æ—Ä–∞ —Ç–≤–∏—Ç–æ–≤

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    """
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–≤–∏—Ç–∞–º")
    stats = {}

    try:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤
        total_tweets = sum(len(user.get('tweets', [])) for user in results)
        stats['total_tweets'] = total_tweets

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ç–≤–∏—Ç–æ–≤
        total_retweets = sum(
            sum(1 for tweet in user.get('tweets', []) if tweet.get('is_retweet'))
            for user in results
        )
        stats['total_retweets'] = total_retweets

        # --- –£–¥–∞–ª–µ–Ω –ø–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å—Ç–∞—Ç–µ–π, —Å—Å—ã–ª–æ–∫ ---
        # total_images = ...
        # stats['total_images'] = total_images
        # total_articles = ...
        # stats['total_articles'] = total_articles
        # total_full_tweets = ...
        # stats['total_full_tweets'] = total_full_tweets
        # total_links = ...
        # stats['total_external_links'] = total_links
        # total_mentions = ...
        # stats['total_mentions'] = total_mentions
        # total_hashtags = ...
        # stats['total_hashtags'] = total_hashtags

        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        stats['total_accounts'] = len(results)

        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {total_tweets} —Ç–≤–∏—Ç–æ–≤, {total_retweets} —Ä–µ—Ç–≤–∏—Ç–æ–≤")

        return stats

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}


def generate_database_statistics(db_connection):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã users –∏ tweets)

    Args:
        db_connection: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    db_stats = {}

    if not db_connection or not db_connection.is_connected():
        logger.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return {"–û—à–∏–±–∫–∞": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"}

    try:
        cursor = db_connection.cursor()

        # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ users –∏ tweets)
        tables = [
            {"name": "users", "label": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
            {"name": "tweets", "label": "–¢–≤–∏—Ç–æ–≤"},
            # {"name": "images", "label": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"}, # –£–¥–∞–ª–µ–Ω–æ
            # {"name": "articles", "label": "–°—Ç–∞—Ç–µ–π"}, # –£–¥–∞–ª–µ–Ω–æ
            # {"name": "tweet_links", "label": "–°—Å—ã–ª–æ–∫ –∏–∑ —Ç–≤–∏—Ç–æ–≤"}, # –£–¥–∞–ª–µ–Ω–æ
            # {"name": "article_links", "label": "–°—Å—ã–ª–æ–∫ –∏–∑ —Å—Ç–∞—Ç–µ–π"} # –£–¥–∞–ª–µ–Ω–æ
        ]

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        for table in tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table['name']}")
                count = cursor.fetchone()[0]
                db_stats[table['label']] = count
                logger.info(f"–í —Ç–∞–±–ª–∏—Ü–µ {table['name']} –Ω–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π")
            except Error as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –µ–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏)
                if e.errno == 1146: # ER_NO_SUCH_TABLE
                     logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ {table['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
                else:
                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table['name']}: {e}")
                db_stats[table['label']] = "–ù/–î"

        # --- –£–¥–∞–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ —Å—Ç–∞—Ç—å—è–º ---
        # try:
        #     cursor.execute("SELECT link_type, COUNT(*) FROM tweet_links GROUP BY link_type")
        #     # ...
        # except Error as e:
        #     # ...
        #
        # try:
        #     cursor.execute(""" SELECT source_domain, COUNT(*) ... FROM articles ... """)
        #     # ...
        # except Error as e:
        #     # ...

        cursor.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        return db_stats

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


def display_results_summary(results, time_filter_hours, images_dir=None): # images_dir –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞ (–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å—Å—ã–ª–æ–∫, —Å—Ç–∞—Ç–µ–π)

    Args:
        results: –°–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–±–æ—Ä–∞ —Ç–≤–∏—Ç–æ–≤
        time_filter_hours: –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–≤–∏—Ç–æ–≤ –≤ —á–∞—Å–∞—Ö
        images_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    """
    logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    try:
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        def format_time_ago(iso_time_str):
            if not iso_time_str: return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                from twitter_scraper_utils import format_time_ago as format_util
                return format_util(iso_time_str)
            except (ImportError, NameError, Exception):
                # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                try:
                    from dateutil import parser
                    import datetime
                    tweet_time = parser.isoparse(iso_time_str)
                    now = datetime.datetime.now(datetime.timezone.utc)
                    diff = now - tweet_time
                    if diff.days > 0: return f"{diff.days} –¥. –Ω–∞–∑–∞–¥"
                    hours = diff.seconds // 3600
                    if hours > 0: return f"{hours} —á. –Ω–∞–∑–∞–¥"
                    minutes = (diff.seconds % 3600) // 60
                    if minutes > 0: return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
                    return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
                except:
                     return iso_time_str.replace('T', ' ').split('.')[0] # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ç–≤–∏—Ç–∞—Ö
        for user_result in results:
            if not isinstance(user_result, dict):
                 logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_result}")
                 continue

            print(f"\n--- {user_result.get('name', 'Unknown')} (@{user_result.get('username', 'unknown')}) ---")
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_result.get('username', 'unknown')}")

            tweets = user_result.get('tweets', [])
            if tweets:
                print("\n–¢–≤–∏—Ç—ã:")
                for tweet in tweets:
                    if not isinstance(tweet, dict):
                         logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–≤–∏—Ç–∞: {tweet}")
                         continue
                    try:
                        time_str = format_time_ago(tweet.get("created_at", ""))
                        retweet_prefix = ""
                        if tweet.get("is_retweet"):
                            retweet_prefix = f"üîÑ –†–µ—Ç–≤–∏—Ç –æ—Ç @{tweet.get('original_author', 'unknown')}: "

                        print(f"[{time_str}] {retweet_prefix}{tweet.get('text', '')}")
                        # print(f"–î–∞—Ç–∞ (ISO): {tweet.get('created_at', '')}") # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                        print(f"URL: {tweet.get('url', '')}")

                        stats = tweet.get("stats", {})
                        print(
                            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: üëç {stats.get('likes', 0)} | üîÑ {stats.get('retweets', 0)} | üí¨ {stats.get('replies', 0)}")

                        # --- –£–¥–∞–ª–µ–Ω –≤—ã–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å—Å—ã–ª–æ–∫, —Å—Ç–∞—Ç–µ–π ---
                        # images = tweet.get("images", [])
                        # if images: ...
                        # if tweet.get("links"): ...
                        # if tweet.get("article"): ...
                        # if tweet.get("is_truncated"): ...

                        print("-" * 20) # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–≤–∏—Ç–µ {tweet.get('url', '')}: {e}")
            else:
                 print("–ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


        # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = generate_tweet_statistics(results)

        print("\n===== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====")
        print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {stats.get('total_accounts', 0)}")
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–≤–µ–∂–∏—Ö —Ç–≤–∏—Ç–æ–≤ (–∑–∞ {time_filter_hours} —á): {stats.get('total_tweets', 0)}")
        print(f"–ò–∑ –Ω–∏—Ö —Ä–µ—Ç–≤–∏—Ç–æ–≤: {stats.get('total_retweets', 0)}")
        # --- –£–¥–∞–ª–µ–Ω –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, —Å—Ç–∞—Ç—å—è–º, —Å—Å—ã–ª–∫–∞–º ---
        # print(f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats.get('total_images', 0)}")
        # print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {stats.get('total_articles', 0)}")
        # print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤: {stats.get('total_full_tweets', 0)}")
        # print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: {stats.get('total_external_links', 0)}")
        # print(f"–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats.get('total_mentions', 0)}")
        # print(f"–í—Å–µ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤: {stats.get('total_hashtags', 0)}")
        # print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.path.abspath(images_dir)}") # –£–¥–∞–ª–µ–Ω–æ

        logger.info("–°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

