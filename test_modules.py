#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª–µ–π
"""

import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_config_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from config import (
            MYSQL_CONFIG, SCRAPER_CONFIG, BEHAVIOR_CONFIG,
            get_random_delay, should_perform_action, validate_config
        )
        logger.info("‚úÖ config.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π
        delay = get_random_delay('between_actions')
        logger.info(f"   –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay:.2f}—Å")

        should_act = should_perform_action('simulate_interest')
        logger.info(f"   –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: {should_act}")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if validate_config():
            logger.info("   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ config.py: {e}")
        return False


def test_human_behavior_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏—è (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)"""
    try:
        from human_behavior import HumanBehaviorSimulator
        logger.info("‚úÖ human_behavior.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä —Å mock-–¥—Ä–∞–π–≤–µ—Ä–æ–º
        class MockDriver:
            def get_window_size(self):
                return {'width': 1920, 'height': 1080}

            def find_elements(self, *args):
                return []

            def execute_script(self, script):
                pass

        behavior = HumanBehaviorSimulator(MockDriver())
        logger.info("   HumanBehaviorSimulator —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏
        delay = behavior.get_random_delay('between_actions')
        logger.info(f"   –¢–µ—Å—Ç –∑–∞–¥–µ—Ä–∂–∫–∏: {delay:.2f}—Å")

        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ human_behavior.py: {e}")
        return False


def test_database_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)"""
    try:
        from database import TwitterDatabase, create_database_connection
        logger.info("‚úÖ database.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        mock_config = {
            'host': 'localhost',
            'database': 'test',
            'user': 'test',
            'password': 'test',
            'port': 3306
        }

        # –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ä–µ–∞–ª—å–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        db = TwitterDatabase.__new__(TwitterDatabase)
        db.config = mock_config
        db.connection = None
        logger.info("   TwitterDatabase –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
        test_date = "2024-01-15T10:30:00.000Z"
        parsed_date = db.parse_twitter_date(test_date)
        logger.info(f"   –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {parsed_date}")

        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ database.py: {e}")
        return False


def test_browser_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)"""
    try:
        from browser import TwitterBrowser, create_browser
        logger.info("‚úÖ browser.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
        browser = TwitterBrowser.__new__(TwitterBrowser)
        browser.driver = None
        browser.session_id = "test123"
        browser.config = {'user_agents': ['test-agent']}

        logger.info("   TwitterBrowser –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π
        user_agent = browser.get_random_user_agent()
        logger.info(f"   –¢–µ—Å—Ç User-Agent: {user_agent}")

        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ browser.py: {e}")
        return False


def test_scraper_module():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ø–∞—Ä—Å–µ—Ä–∞ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞)"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        logger.info("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
        from simple_scraper import SimpleTwitterScraper

        test_config = {
            'scraper': {'max_tweets_per_account': 2}
        }

        simple_scraper = SimpleTwitterScraper(test_config)
        logger.info("   SimpleTwitterScraper —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ä—Å–∏—é
        logger.info("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏...")
        try:
            from scraper import LightweightTwitterScraper

            main_config = {
                'mysql': {'host': 'test'},
                'scraper': {'max_tweets_per_account': 5},
                'browser': {'user_agents': ['test']},
                'behavior': {'delays': {'between_actions': (1, 2)}}
            }

            main_scraper = LightweightTwitterScraper(main_config)
            logger.info("   LightweightTwitterScraper —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

            # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
            test_date = "2024-01-15T10:30:00Z"
            parsed = main_scraper._parse_twitter_date(test_date)
            logger.info(f"   –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {parsed}")

        except SyntaxError as syntax_err:
            logger.error(f"   ‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ scraper.py: {syntax_err}")
            logger.info("   ‚úÖ –ù–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π...")

    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config_module),
        ("–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", test_human_behavior_module),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database_module),
        ("–ë—Ä–∞—É–∑–µ—Ä", test_browser_module),
        ("–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä", test_scraper_module)
    ]

    results = []
    for test_name, test_func in tests:
        logger.info(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))

    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 50)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 50)

    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        logger.info(f"{status} - {test_name}")
        if result:
            passed += 1

    logger.info("-" * 50)
    logger.info(f"–£—Å–ø–µ—à–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤")

    if passed == len(results):
        logger.info("üéâ –í—Å–µ –º–æ–¥—É–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        logger.error("üí• –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª—è–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)